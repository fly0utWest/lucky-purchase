"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";

const RegistrationSchema = z
  .object({
    login: z.string().email({ message: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª. –ø–æ—á—Ç—ã" }),
    name: z.string().min(1, { message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è" }),
    password: z
      .string()
      .min(6, { message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤" }),
    confirmPassword: z.string().min(6, { message: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å" }),
  })
  .refine((data) => data.password === data.confirmPassword, {
    message: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç",
    path: ["confirmPassword"],
  });

const LoginSchema = z.object({
  login: z.string().email({ message: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª. –ø–æ—á—Ç—ã" }),
  password: z
    .string()
    .min(6, { message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤" }),
});

type RegistrationFormData = z.infer<typeof RegistrationSchema>;
type LoginFormData = z.infer<typeof LoginSchema>;

export function AuthForm() {
  const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL;
  const [tab, setTab] = useState<"sign-in" | "sign-up">("sign-up");
  const [successMessage, setSuccessMessage] = useState("");

  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
    reset,
  } = useForm<RegistrationFormData | LoginFormData>({
    resolver: zodResolver(tab === "sign-up" ? RegistrationSchema : LoginSchema),
  });

  const handleTabChange = (value: string) => {
    if (value === "sign-in" || value === "sign-up") {
      setTab(value);
      setSuccessMessage("");
      reset();
    }
  };

  const onSubmit = async (data: RegistrationFormData | LoginFormData) => {
    const isSignUp = tab === "sign-up";
    const { confirmPassword, ...filteredData } = isSignUp
      ? (data as RegistrationFormData)
      : data;

    try {
      const endpoint = isSignUp ? "/user/register" : "/auth/login";
      const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(filteredData),
      });

      if (!response.ok) {
        throw new Error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞");
      }

      reset();
      if (isSignUp) {
        setSuccessMessage(
          "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É."
        );
        setTab("sign-in");
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞:", error);
    }
  };

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle className="text-center text-2xl">–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</CardTitle>
      </CardHeader>
      <CardContent>
        {successMessage && (
          <p className="text-green-500 text-center mb-4">{successMessage}</p>
        )}
        <Tabs value={tab} onValueChange={handleTabChange} className="w-full">
          <TabsList className="grid grid-cols-2">
            <TabsTrigger value="sign-in">–í—Ö–æ–¥</TabsTrigger>
            <TabsTrigger value="sign-up">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</TabsTrigger>
          </TabsList>

          {/* üîπ Sign-in Form */}
          <TabsContent value="sign-in">
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
              <div>
                <Label htmlFor="email">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</Label>
                <Input
                  id="email"
                  type="text"
                  {...register("login")}
                  placeholder="example@mail.com"
                />
                {errors.login && (
                  <p className="text-red-500 text-sm">{errors.login.message}</p>
                )}
              </div>
              <div>
                <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
                <Input
                  id="password"
                  type="password"
                  {...register("password")}
                />
                {errors.password && (
                  <p className="text-red-500 text-sm">
                    {errors.password.message}
                  </p>
                )}
              </div>
              <Button type="submit" className="w-full" disabled={isSubmitting}>
                {isSubmitting ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–í–æ–π—Ç–∏"}
              </Button>
            </form>
          </TabsContent>

          {/* üîπ Sign-up Form */}
          <TabsContent value="sign-up">
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
              <div>
                <Label htmlFor="name">–ò–º—è</Label>
                <Input
                  id="name"
                  type="text"
                  {...register("name")}
                  placeholder="–í–∞—à–µ –∏–º—è"
                />
                {tab === "sign-up" && errors.name && (
                  <p className="text-red-500 text-sm">{errors.name.message}</p>
                )}
              </div>
              <div>
                <Label htmlFor="email">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞</Label>
                <Input
                  id="email"
                  type="text"
                  {...register("login")}
                  placeholder="example@mail.com"
                />
                {tab === "sign-up" && errors.login && (
                  <p className="text-red-500 text-sm">{errors.login.message}</p>
                )}
              </div>
              <div>
                <Label htmlFor="password">–ü–∞—Ä–æ–ª—å</Label>
                <Input
                  id="password"
                  type="password"
                  {...register("password")}
                />
                {tab === "sign-up" && errors.password && (
                  <p className="text-red-500 text-sm">
                    {errors.password.message}
                  </p>
                )}
              </div>
              <div>
                <Label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</Label>
                <Input
                  id="confirmPassword"
                  type="password"
                  {...register("confirmPassword")}
                />
                {tab === "sign-up" && errors.confirmPassword && (
                  <p className="text-red-500 text-sm">
                    {errors.confirmPassword.message}
                  </p>
                )}
              </div>
              <Button type="submit" className="w-full" disabled={isSubmitting}>
                {isSubmitting ? "–ó–∞–≥—Ä—É–∑–∫–∞..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
              </Button>
            </form>
          </TabsContent>
        </Tabs>
      </CardContent>
    </Card>
  );
}
